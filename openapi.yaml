openapi: 3.0.3
info:
  title: API for International Registry Interoperability (Work In Progress)
  description: 
     <b>Introduction</b>
     <br><br>This API is part of the communication standards for transactions with
     Internationally Transferred Mitigation Outcomes (ITMOs) pursuant to decision 6/CMA.4, para. 32.
     <br><br>Participating Parties opting to apply the guidance referred to in 
     decision 6/CMA.4, annex I, chapter I.B are expected to adhere to this API when they interoperate.
     <br><br><b>Current status</b>
     <br><br>This API is currently in development.
  version: 0.0.1
  contact: 
    name: UNFCCC secretariat (Voluntary forum of Article 6 registry system administrators and technical experts)
    email: a6rsaf@unfccc.int
    url: https://www.unfccc.int
  license: 
    name: License not applicable
    url: N/A
  x-audience: external-public
  x-api-id: unused-for-this-api-0
servers:
  - url: TBD
    description: Production server (uses live data !)
  - url: TBD
    description: Test server (uses test data)
tags:
  - name: Status
    description: Manage the status of the API / server
  - name: Registry
    description: Manage participating Party registries, including its contact details.
  - name: Account
    description: Manage the account(s) of participating Party registries
  - name: Action
    description: Manage actions of participating Party registries
  - name: ITMO
    description: Manage ITMOs of the caller registry
  - name: Export
    description: Manage exports of information of the caller registry
  - name: PullView
    description: Used by Pull and View interface

paths: 

  /serverStatus:
    get:
      tags:
        - Status
        - PullView
      operationId: getServerStatus
      summary: Get the current server status and date/time
      description: Get the current server status and date/time
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  status:
                    type: string
                    enum: [Operational, Non-Operational, Action Proposals Disallowed]
                    description: >
                      The operational status of the server:<br>
                      * Operational: all operations are allowed<br>
                      * Non-Operational: no operations are allowed<br>
                      * Action Proposals Disallowed: all operations are allowed, except Action Proposals.
                    example: Operational
                  timestamp:
                    type: string
                    format: date-time
                    minLength: 20
                    maxLength: 20
                    description: Date/time as defined in RFC 3339, section 5.6
                    example: 2027-07-21T17:32:28Z
              example:
                status: Non-Operational
                timestamp: 2026-07-21T17:32:28Z
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /registry/{regId}:
    get:
      tags: 
        - Registry
      operationId: getRegistry
      summary: Retrieve the details of the participating Party registry
      description: Retrieve the details of the participating Party registry corresponding to regId.<br>
        To keep coding compact, in code, "registry" will be used instead of "participatingPartyRegistrySection" 
      parameters:
        - name: regId
          in: path
          description: Identifier of the registry corresponding to the participating Party registry
          required: true
          schema:
            type: string
            minLength: 5
            maxLength: 5
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
    
    post:
      tags:
        - Registry
      operationId: createRegistry
      summary: Create a new participating Party registry
      description: Create a new participating Party registry with an identifier of regId.<br>
        If a registry with the same registry identifier already exists, the operation will be unsuccessful.<br>
        The caller of this operation must be participating Party responsible for the registry, as determined by the authentication mechaism,<br>
		ie, the apiKey must be assigned to the relevant Party.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the new participating Party registry
          required: true
          schema:
            type: string
            minLength: 5
            maxLength: 5
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      requestBody:
        description: The registry contact list of this registry.<br><br>
          The contact list array must contain at least two Contacts.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contacts:
                  type: array
                  minItems: 2
                  maxItems: 10
                  items:
                    $ref: '#/components/schemas/Contact'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
        '400':
          description: Unsuccessful operation
          content:
            application/problem:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/problem:
              schema:
                $ref: '#/components/schemas/Errors'

    post:
      tags:
        - Registry
      operationId: resetTestRegistry
      summary:
        Reset a test registry - this operation is NOT available in any production environment
      description:
        For use in test environment(s) to reset and clean up test registries.<br><br>
        Removes all holdings, transactions, accounts, ... of the registry identified by regId,
        including all ITMOs issued by the registry located in other test registries and         
        all transactions to/from the test registry.<br><br>
        This operation not available in the production environment.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry to be reset
          required: true
          schema:
            type: string
            minLength: 5
            maxLength: 5
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      requestBody:
        description: The registry contact list of this registry.
          Array must contain at least two Contacts.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contacts:
                  type: array
                  minItems: 2
                  maxItems: 10
                  items:
                    $ref: '#/components/schemas/Contact'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /registry/{regId}/insertContact:
    post:
      tags:
        - Registry
      operationId: insertContact
      summary:
        Insert a contact to a registry's list of contacts
      description:
        Insert a contact to a registry.<br><br>
        The new contact is inserted in the position specified in the contact's order property - current contacts are pushed down.<br><br>
        If there are already 10 contacts in the list, the operation fails.
        If there is already a contact with the same email address or the same phone number in the list, the operation fails.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry in which the contact is to be inserted.
          required: true
          schema:
            type: string
            minLength: 5
            maxLength: 5
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      requestBody:
        description: The contact to be inserted.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /registry/{regId}/removeContact/{email}:
    post:
      tags:
        - Registry
      operationId: removeContact
      summary:
        Remove the contact with the corresponding email address from a registry's list of contacts
      description:
        Remove a contact from a registry.<br><br>
        Current contacts behind the one to be removed are moved up in order.<br><br>
        If there are less than 2 existing contacts, the operation fails.
        If there is no current contact associated with the provided email adddress, the operation fails.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry in which the contact is to be inserted.
          required: true
          schema:
            type: string
            minLength: 5
            maxLength: 5
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
        - name: email
          in: path
          description: The email address of the contact to be removed.
          required: true
          schema:
            type: string
            example: jhalleux@unfccc.int
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /registry/{regId}/getAccounts:
    get:
      tags:
        - Account
      operationId: getAccounts
      summary:
        Return an array of accounts belonging to the registry with identifier regId.
      description:
        Return an array of accounts belonging to the registry with identifier regId.<br><br>
        If a registry doesn't have any accounts defined, return an empty array.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry for which the accounts are to be returned.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  itmos:
                    type: array
                    maxItems: 5000
                    items:
                      $ref: '#/components/schemas/Account'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /registry/{regId}/insertAccount:
    post:
      tags:
        - Account
      operationId: insertAccount
      summary:
        Insert an account to a registry's list of accounts
      description:
        Insert an account into a registry.<br><br>
        If an account with the same account number already exists in the registry, the operation fails.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry in which the contact is to be inserted.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      requestBody:
        description: The account to be inserted.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /registry/{regId}/removeAccount/{accountId}:
    post:
      tags:
        - Account
      operationId: removeAccount
      summary:
        Remove an account from a registry
      description:
        Remove an account from a registry.<br><br>
        Only empty accounts may be removed - if the account currently holds ITMOs, the operation fails.<br>
        If no account with the provided account exists in the registry, the operation fails.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry in which the contact is to be inserted.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
        - name: accountId
          in: path
          description: The accountId to be removed.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 999999999
            example: 7564
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'


  /action/{regId}/registerCooperativeApproachAuth:
    post:
      tags:
        - Action
      operationId: registerCooperativeApproachAuth
      summary: Register authorised cooperative approach, from the registry identified by regId.
      description: Register authorised cooperative approach, from the registry identified by regId.
        This may be performed by the secretariat when it registers the CA with the CARP.
        This enables the CAs and ITMOs for interoperability.
        This will create the CooperativeApproachAuthorisation and the CooperativeApproach within the International Registry.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry in which the contact is to be inserted.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      requestBody:
        description: The cooperative approach authorisation to be registered.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CooperativeApproachAuthorization'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'


  /action/{regId}/registerITMOs:
    post:
      tags:
        - Action
      operationId: registerITMOs
      summary: Register authorised ITMOs, from the registry identified by regId.
      description: Register authorised ITMOs, from the registry identified by regId.
        This enables ITMOs for interoperability by registering the ITMO's unique identifier and accountId.
        If the accountId does not exist in the registry, the account is added to the registry.
        If the ITMOs's unique identifier (Party Id, serialFist, serialLast) overlaps with another ITMO block,
        the operation fails.
        If the ITMO's cooperative approach is not found, or is not yet authorised, the operation fails.
        If the ITMO's details contradict those provided when the ITMO or its Cooperative Approach were authorised, the operation fails.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry in which the contact is to be inserted.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      requestBody:
        description: The ITMOs to be registered.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ITMO'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'


  /action/{regId}/propose:
    post:
      tags:
        - Action
      operationId: proposeAction
      summary: Propose a new action, from the registry identified by regId
        If the proposed action is valid, it will be added to the pending actions list, avalable for appropriate registries to process.
        An actionId is returned by the operation, so regitries can check and augment the status of an action.
      description: Propose a new action, from the registry identified by regId
        If the proposed action is valid, it will be added to the pending actions list, avalable for appropriate registries to process.
        An actionId is returned by the operation, so regitries can check and augment the status of an action.

        If the proposed action is not valid, the operation will fail.
        The incoming payload is the proposedAction, that also include the ITMOs involved in the action.
        These will be locked for the duration of the action.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry in which the contact is to be inserted.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      requestBody:
        description: The proposed action.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposedAction'

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /action/{regId}/{actionId}:
    get:
      tags:
        - Action
      operationId: getAction
      summary: Retrieve the action corresponding to actionId
      description: Retrieve the action corresonding to actionId.
        The calling registry must have a registry id corresponding to regId,
        and only only when regId is the fromRegistry or toRegistry will the action be returned.
      parameters:
        - name: regId
          in: path
          description: The identifier of the registry for which actions are to be retrieved.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
        - name: actionId
          in: path
          description: The action identifier
          required: true
          schema:
            type: integer
            format: uint32
            minimum: 1
            maximum: 4294967295
            example: 87349
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  itmos:
                   type: array
                   maxItems: 100
                   items:
                    $ref: '#/components/schemas/Action'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
    post:
      tags:
        - Action
      operationId: processAction
      summary: Accept, reject or cancel an action
      description: Accept, reject or cancel an action
      parameters:
        - name: regId
          in: path
          description: The identifier of the registry attempting to process the action.
          required: true
          schema:
            type: string
            example: "BEL"
        - name: actionId
          in: path
          description: The action identifier
          required: true
          schema:
            type: integer
            format: uint32
            minimum: 1
            maximum: 4294967295
            example: 87349
      requestBody:
        description: The action to process.
          Only the recipient can accept or reject an action.
          Only the proposer can cancel an action.
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  format: enum[ACCEPTED, REJECTED, CANCELLED]
                  example: REJECTED
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  
  
  /action/{regId}/pendingActions:
    get:
      tags:
        - Action
      operationId: getPendingActions
      summary: Retrieve the actions that are pending processing for the registry identified by regId
      description: Retrieve the actions that are pending processing for the registry identified by regId.
        This is the API that is expected to be normally used by registries to process transactions.
        The similar API, getSelectedActions(), returns actions with other statuses, used for management or testing.
      parameters:
        - name: regId
          in: path
          description: The identifier of the registry for which actions are to be retrieved.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  itmos:
                    type: array
                    maxItems: 100
                    items:
                      $ref: '#/components/schemas/Action'
        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /action/{regId}/selectedActions:
    get:
      tags:
        - Action
      operationId: getSelectedActions
      summary: Retrieve the transactions for the registry identified by regId and other parameters
      description: Retrieve the transactions for the registry identified by regId and other parameters.
        Actions where the registry is both the from registry and the to registry will be retrieved.
        This API is for management and testing, as it is more complicated than getPendingActions()
      parameters:
        - name: regId
          description: The identifier of the registry for which actions are to be retrieved.
            Actions where the registry is both the from registry and the to registry will be retrieved.
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
        - in: query
          name: offset
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 999999999
          description: The number of items to skip before starting to collect the transactions
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
          description: The number of transactions to return
        - in: query
          name: status
          schema:
            type: string
            enum: [PROPOSED, ACCEPTED, REJECTED, CANCELLED]
          description: Allows to filter by transaction status
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          description: The minimum date-time of transactions to return
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          description: The maximum date-time of transactions to return
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  itmos:
                    type: array
                    maxItems: 100
                    items:
                      $ref: '#/components/schemas/Action'

        '400':
          description: Unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'


components:
  schemas:

    Registry:
      type: object
      required:
        - id
        - contacts
      properties:
        id:
          $ref: "#/components/schemas/RegistryId"
        contacts:
          type: array
          maxItems: 10
          description: The list of contacts for the registry.
            The order attribute determines the order of presentation of the contacts,<br><br>
            and must start with 1, 2, 3 ... , without gaps and sorted ascendingly.<br><br>
            At least two contacts must be provided (primary and alternate), with order 1 and 2 respectively.
          items:
            $ref: "#/components/schemas/Contact"
        accounts:
          type: array
          description: The list of accounts used by this registry
          items:
            $ref: "#/components/schemas/Account"
        lastmodifieddatetime:
          type: string
          format: date-time
          description: The date and time of the most recent change to the registry transactions, accounts or holdings.  This is used to set the cut-off date during the export.
          example: "2026-07-21T17:22:28Z"
        creationdatetime:
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"

    RegistryId:
      type: string
      pattern: '^[A-Z]{3}\d{2}$'
      description: Identifier a participating Party registry.<br><br>
        Consisting of the ISO-3166-1 alpha-3 code of the participating Party as per common nomenclatures,<br><br>
        and two digit registry serial number.
      example: "DEU00"

    Account:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
          description: The id of the account.  The account id must be unique across a registry.
          minimum: 1
          maximum: 999999999
          example: 7564
        accountType:
          type: integer
          minimum: 100
          maximum: 999
        labels:
          type: array
          maxItems: 10
          items:
            type: string
            example: "My favorite account"
        suppinfo:
          type: string
          example: "Find a reasonably good example..."
        lastmodifieddatetime:
          type: string
          format: date-time
          description: The date and time of the last transaction proposed from this account,<br><br>
            or accepted/rejected/cancelled with this account as recipient
          example: "2024-07-21T17:32:28Z"
        creationdatetime:
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"

    Contact:
      type: object
      required:
        - givenNames
        - familyName
        - email
        - phone
        - role
        - order
      properties:
        familyName:
          type: string
          example: "Halleux"
        givenNames:
          type: string
          example: "Jean-Francois"
        email:
          type: string
          example: "jhalleux@unfccc.int"
        phone:
          type: string
          example: "00498151809"
        role:
          type: string
          example: "Alternate registry administrator"
        order:
          type: integer
          format: int32
          minimum: 1
          maximum: 10
          example: 3

    Action:
      type: object
      description: An ProposedAction that has been validated by the hub, and given an actionId (see ProposedAction)
      required:
        - actionId
        - proposedAction
      properties:
        actionId:
          type: integer
          format: uint32
          description: Identifier for the action.  Action identifiers are unique across the international registry ecosystem.
          minimum: 0
          maximum: 4294967295
          example: 5869444
        proposedAction:
          $ref: '#/components/schemas/ProposedAction'

    ProposedAction:
      type: object
      description: An proposed action to be performed on a block of ITMOs.
        A registry proposes an action to the hub.  Once the hub validates the proposedAction, it is given an actionId (see Action schema).
        An action consists in the transfer of at least one ITMO from one account to another account, in the same or in a different registry.
        An authorisation/issuance/creation action must specify the same origin and destination account.
        All other transaction must specify different origin and destination accounts.
      required:
        - fromRegistry
        - fromAccount
        - toRegistry
        - toAccount
        - actionType
        - itmos
      properties:
        fromRegistry:
           $ref: "#/components/schemas/RegistryId"
        fromAccount:
          type: integer
          format: int32
          minimum: 1
          maximum: 999999999
          example: 7564
        toRegistry:
          $ref: "#/components/schemas/RegistryId"
        toAccount:
          type: integer
          format: int32
          minimum: 1
          maximum: 999999999
          example: 38444
        actionType:
          type: integer
          description: The action type code. See Common Nomenclatures for action type codes, and their corresponding values and descriptions.
          example: 1
        itmos:
          $ref: '#/components/schemas/ITMO'  
        status:
          type: string
          enum: [PROPOSED, ACCEPTED, REJECTED, CANCELLED]
          example: ACCEPTED
        statusdatetime:
          type: string
          format: dateTime
          example: "2024-07-21T17:32:28Z"
        labels:
          type: array
          maxItems: 10
          items:
            type: string
            example: "My favorite transaction"
        suppinfo:
          type: string
          example: "Find a good example of suppl. information ..."
        lastmodifieddatetime:
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"
        creationdatetime: # The date time of the PROPOSED status is always here...
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"

    Authorization:
      type: object
      description: Abstract superclass for authorisations
      required:
        - authorizingPartyId
        - authorisationId
        - authorisationDate
        - version
        - lastChangeDate
        - startDate
        - endDate
        - isAuthorizationForCA
        - isAuthorizationForITMOs
        - isAuthorizationForEntities
      properties:
        authorisationId:
          description: Authorization Id as assigned by the Party reporting the authorisation.
          type: string
          example: "GUY 2024-CA1"
        authorisationDate:
          description: Datestamp of the authorisation of the cooperative approach.
            A cooperative approach may be authorised multiple times.  Only the latest is valid.
          type: string
          format: date
          example: "2024-07-21"
        version:
          description: Version of the authorisation of the cooperative approach.  The latest version is valid.
          type: string
          example: "1.0"
        lastChangeDate:
          description: Date of last change to the authorization.
          type: string
          format: date
          example: "2024-07-21"
        startDate:
          description: start date of the authorization.
          type: string
          format: date
          example: "2024-07-21"
        endDate:
          description: end date of the authorization.
          type: string
          format: date
          example: "2026-07-21"
        isAuthorizationForCA:
          description: Is this authorization for a cooperative approach
          type: boolean
        isAuthorizationForITMOs:
          description: Is this authorization for ITMOs
          type: boolean
        isAuthorizationForEntities:
          description: Is this authorization for a entities
          type: boolean
        NDCStartDate:
          description: start date of NDC period of the issuing Party.
          type: string
          format: date
          example: "2024-07-21"
        NDCEndDate:
          description: end date of the NDC period of the issuing Party.
          type: string
          format: date
          example: "2026-07-21"
        possibleChanges:
          description: Where changes to the authorizaton may occur,<br><br>
            information on the circumstances in which such changes may occur,<br><br>
            and a desciption of the process for managing them<br><br>
            in a way that avoids double counting.
          type: array
          items:
            description: A possible change, and the management process.
            type: string
            example: "a possible change"
        actualChanges:
          description: Where changes to the authorizaton have occurred,<br><br>
            a description of the curcumstances in which the change occurred,<br><br>
            and and how the changes follow the process for managing them<br><br>
            in a way that avoids double counting.
          type: array
          items:
            description: A occurred change, and the followed management process.
            type: string
            example: ""
        changeDelta:
          description: Where changes to the authorizaton have occurred,<br><br>
            a description of the specific change in respect,<br><br>
            to the earlier version of the authorization.
          type: array
          items:
            description: What has changed.
            type: string
            example: "the difference"
        termsAndConditions:
          description: optionally provided terms and conditions for this authorisation
          type: array
          items:
            type: string
        additionalInfo:
          description: Any additional information the Party submitted with the authorisation.
          type: array
          items:
            type: string
            maxLength:  255

    CooperativeApproachAuthorization:
      type: object
      required:
        - authorization
        - cooperativeApproachName
        - cooperativeApproachId
        - metric
        - sectors
        - activityTypes
        - purpose
      properties:
        authorization:
          $ref: '#/components/schemas/Authorization'
        cooperativeApproachAuthorized:
           $ref: '#/components/schemas/CooperativeApproach'

    ITMOAuthorization:
      type: object
      required:
        - authorization
        - cooperativeApproachId
        - purposeForAuthorization
        - quantityC02
      properties:
        authorization:
          $ref: '#/components/schemas/Authorization'
        cooperativeApproachId:
          description: Cooperative approaches under Article 6.2.<br><br>
            The format of the string is \"CANNNN\" where the \"CA\" is the fixed prefix, and NNNN is a four-digit integer,<br><br>
            that shall be incremented by one for each additional agreed cooperative approach, and added to this common nomenclature.
          type: string
          example: "CA0002"
        purposeForAuthorization:
          description: Purpose for authorisation as described by Decision 6/CMA.4 para 17 (j)<br><br>
            Refer to common nomenclatures for code lookup.
          type: integer
          minimum: 1
          maximum: 7
          example: 1
        OIMPsAuthorized:
          description: Only applicable if the authorization is for OIMP.<br><br>
            This field specifies the other international mitigation purpose (OIMP) authorised for this cooperative approaches
          type: array
          items:
            type: string
        quantityCO2:
          description: Quantity of ITMOs in metric tons of CO2 equivalent.
          type: integer
          format: int32
          minimum: 1
          maximum: 999999999
          example: 7144362
        vintages:
          description: Years in which mitigation outcomes occured as covered by the authorisation
          type: array
          items:
            type: integer
            minimum: 2021
            maximum: 9999
            example: 2025
        authorizationRegistryId:
          description: The registry the participating Party has access to, for tracking and reccording ITMOs.
          #ref: "#/components/schemas/RegistryId"
        underlyingCooperativeApproaches:
          description: Details, including registries and frameworks used by the ITMOs.
          type: array
          items:
            description: Relevant registries in any underlying regulations, frameworks, standards, or procedures.
            #ref: "#/components/schemas/UnderlyingCooperativeApproach"

    UnderlyingCooperativeApproach:
      type: object
      required:
        - registryId
        - approachName
      properties:
        registryId:
          description: The identifier of the relavant registry in a underlying approach
          #ref: "#/components/schemas/RegistryId"
        approachName:
          description: Name of the underlying regulation, framework, standard, or procedure<br><br>
            under which the relevant registry operates.

    EntityAuthorization:
      type: object
      required:
        - authorization
        - purposeForAuthorization
        - quantityC02
      properties:
        authorization:
          $ref: '#/components/schemas/Authorization'
        cooperativeApproachId:
          description: the cooperativeApproach for which these entities are authorised.
          type: string
          example: "CA0002"
        authorisedEntityIds:
          description: Unique identifier of entities that are authorised as per common nomenclatures, if applicable.<br><br>
            These entities are added to the cooperative approach's list of authorised entities.
          type: array
          items:
            type: string

    CooperativeApproach:
      type: object
      required:
        - cooperativeApproachId
        - authorisationId
        - otherParticipatingParties
        - startDate
        - endDate
        - metric
        - sectors
        - mitigationTypes
        - activityTypes
      properties:
        cooperativeApproachId:
          description: Cooperative approaches under Article 6.2.<br><br>
            The format of the string is \"CANNNN\" where the \"CA\" is the fixed prefix, and NNNN is a four-digit integer,<br><br>
            that shall be incremented by one for each additional agreed cooperative approach, and added to this common nomenclature.
          type: string
          example: "CA0002"
        authorisationId:
          description: Authorization Id as assigned by the Party authorizing this cooperative approach.
          type: string
          example: "GUY 2024-CA1"
        otherParticipatingParties:
          description: Identifiers of other participating Parties covered by authorization of cooperative approach.
          type: array
          items:
            description: ISO-3166-1 alpha-3 code of the participating Party as per common nomenclatures.
            type: string
            example: "BEL"
        startDate:
          description: start date of the cooperative approach.
          type: string
          format: date
          example: "2024-07-21"
        endDate:
          description: end date of the cooperative approach.
          type: string
          format: date
          example: "2026-07-21"
        firstTransferForOIMP:
          description: Only for authorisations for use toward OIMP.<br><br>
            Specifies the first transfer definition used by the Pary pursuant to decision 2/CMA.3, annex, para. 2(b).<br><br>
            Refer to common nomenclatures for code lookup.
          type: integer
          minimum: 2
          maximum: 4
          example: 2          
        metric:
          description: The metric used to measure the ITMO.<br><br>
            As defined per common nomenclature - recognised values are \"GHG\" and \"non-GHG\".
          type: string
          example: "GHG"
        nonGHGMetrics:
          description: The nonGHG metrics used by this cooperative approach
          type: array
          items:
            $ref: '#/components/schemas/NonGHGMetric'
        sectors:
          description: One or more sectors where the mitigation outcome will occur as per common nomenclatures based on IPCC guidelines.<br><br>
            Refer to common nomenclature for recognised values for \"sectors\".
          type: array
          items:
            type: string
        mitigationTypes:
          description: The mitigation type(s) covered by the cooperative approach.<br><br>
            Refer to common nomenclatures for recognised values for  \"mitigationTypes\".
          type: integer
          example: 1
        activityTypes:
          description: The mitigation activity type(s) from which the ITMOs were generated.<br><br>
            Refer to common nomenclature for recognised values for \"activityTypes\".
          type: array
          items:
            type: integer
            example: 1
        activities:
          description: More information of the activities
          type: array
          items:
             $ref: '#/components/schemas/ActivityRef'
        authorisedEntityIds:
          description: Unique identifier of entities that are authorised as per common nomenclatures,<br><br>
            for this cooperative approach, if applicable.
          type: array
          items:
            type: string
        mitigationOutcomeDocHashes:
          description: (required by Decision 6/CMA.4, annex I, para.4). ITMOs must be traceable to their mitigation outcomes.<br><br>
            This array contains the SHA256 hashes of all mitigation outcome documents for this cooperativeApproach.<br><br>
            The UNFCCC will store all MO documents, and provide an API getMitigationOutcomeDoc(cooperativeApproachId, sha256)
            that will return the URL of the MO document corresponding to the hash.
          type: array
          items:
            description: SHA256 hash of a single mitigation outcome document
            type: string
            minItems: 1
            example: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        otherReferences:
          description: Identification of, or coress-reference to, underlying regulations,<br><br>
            frameworks, standards, or procedures,<br><br>
            including any specific methodologies underpinning the cooperative approach.
          type: array
          items:
            type: string
            example: ""

    NonGHGMetric:
      type: object
      required:
        - metric
        - conversion
        - gwpValues
      properties:
        metric:
          description: The non-GHG metric name
          type: string
          example: "megawatt hours of renewable electricity generation"
        conversion:
          description: the conversion factor to convert the metric to 1 metric tonne of C02.
          type: number
          format: double
          example: 0.39
        gwpValues:
          description: If the mitigation outcome involves a non-CO2 greenhouse gas(es),<br><br>
            the global warming potential (GWP) value(s) applied,<br><br>
            consistent with the relevant CMA decisions (e.g.,\'100-year values from 5th assessment report by the IPCC\').
          type: string          

    ActivityRef:
      type: object
      required:
        - activityName
      properties:
        activityId:
          description: the identifier of the activity, if it has one
          type: string
          example: ""
        activityName:
          description: the name of the activity
          type: string
          example: ""

    ITMO:
      type: object
      required:
        - cooperativeApproachId
        - authorisationId
        - originatingPartyRegistry
        - firstTransferringParty
        - firstId
        - lastId
        - vintage
        - partyITMORegistry
      properties:
        cooperativeApproachId:
          description: Cooperative approach under which ITMOs were authorised.
          type: string
          example: "CA0002"
        authorisationId:
          description: Authorization Id as assigned by the Party reporting the authorisation.
          type: string
          example: "GUY 2024-CA1"
        orginatingPartyRegistry:
          description: The participating Party registry in which the mitigation outcomes originated.
          #ref: "#/components/schemas/RegistryId"
        firstTransferringParty:
          description: ISO-3166-1 alpha-3 code of participating Party that initiates the \"First Transfer\".
            Refer to common nomenclalture for definition of \"First Transfer\".
          type: string
          example: "FRA"
        firstId:
          description: Identifier of the first ITMO in the block, commencing with First Id, ending with Last Id.\nBlocks from the same Originating Party Registry cannot overlap.
          type: integer
          format: int32
          example: 1
        lastId:
          description: Identifier of the last ITMO in the block, commencing with First Id, ending with Last Id.\nBlocks from the same Originating Party Registry cannot overlap.
          # Note: decision 6/CMA.4, annex I, para.5(d) requires a single unique identifier in ITMO identifier,
          # but as all ITMOs are considered as blocks, the last identifier of the block is required.
          type: integer
          format: int32
          example: 7144
        vintage:
          description: Year in which mitigation outcome occured
          type: integer
          minimum: 2021
          maximum: 9999
          example: 2025
        partyITMORegistry:
          description: The participating Party registry that currently owns the ITMO(s).
          #ref: "#/components/schemas/RegistryId"
        accountId:
          description: the identifier of the account currently holding the ITMOs.
            The account id must be unique across a registry.
          type: integer
          format: int32
          minimum: 1
          maximum: 999999999
          example: 7564
        suppInfo:
          description: Any supplementary information the current owning Party may need to attach to the ITMOs
            This should be an append only property.
            Only the current owning Party should be able append supplementary information.
          type: array
          items:
            type: string
            maxLength:  255
        lastanyTxnDateTime:
          description:  Date-timestamp of the last attempted transaction.
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"
        lastAcceptedTxnDateTime:
          description:  Date-timestamp of last successful transation.
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"
        modifiedDateTime:
          description:  Date-timestamp of last modification of any of the ITMO(s) elements.
            Kept in ITMO instead of relying on hosting system to survive migration across hosting solutions.
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"
        createdDateTime:
          description:  Date-timestamp of creation of the ITMO(s).
            Kept in ITMO instead of relying on hosting system to survive migration across hosting solutions.
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"

    Errors:
      type: object
      properties:
        errors:
          type: array
          maxItems: 100
          items:
            type: object
            properties:
              severity:
                type: string
                enum: [ERROR, WARNING]
                example: ERROR
              code:
                type: integer
                format: int32
                example: 5678
              message:
                type: string
                maxLength: 1024
                example: "Unexpected error"
              
  securitySchemes:

    basicAuth:
      type: http  #TBD: Open API 3.1 supports mutualTLS
      scheme: basic
      x-registry-secret:
        type: string

security:
  - basicAuth: []
