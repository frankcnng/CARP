
openapi: 3.0.3
info:
  title: API for International Registry Interoperability (Work In Progress)
  description: 
     <b>Introduction</b>
     <br><br>This API is part of the communication standards for transactions with
     Internationally Transferred Mitigation Outcomes (ITMOs) pursuant to decision 6/CMA.4, para. 32.
     <br><br>Participating Parties opting to apply the guidance referred to in 
     decision 6/CMA.4, annex I, chapter I.B are expected to adhere to this API when they interoperate.
     <br><br><b>Current status</b>
     <br><br>This API is currently in development.
  version: 0.0.1
  contact: 
    name: UNFCCC secretariat (Voluntary forum of Article 6 registry system administrators and technical experts)
    email: a6rsaf@unfccc.int
    url: https://www.unfccc.int
  license: 
    name: N/A
    url: N/A
  x-audience: external-public
  x-api-id: unused-for-this-api-0
servers:
  - url: TBD
    description: Production server (uses live data !)
  - url: TBD
    description: Test server (uses test data)
tags:
  - name: Status
    description: Manage the status of the API / server
  - name: Registry
    description: Manage Participating Party Registry Sections, including its contact details.
  - name: Account
    description: Manage the account(s) of Participating Party Registry Sections
  - name: Action
    description: Manage actions of Participating Party Registry Sections
  - name: ITMO
    description: Manage ITMOs of the caller registry
  - name: Export
    description: Manage exports of information of the caller registry

paths: 

  /serverStatus:
    get:
      tags:
        - Status
      operationId: getServerStatus
      summary: Get the current server status and date/time
      description: Get the current server status and date/time
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  status:
                    type: string
                    enum: [Operational, Non-Operational, Action Proposals Disallowed]
                    description: >
                      The operational status of the server:
                      * Operational: all operations are allowed
                      * Non-Operational: no operations are allowed
                      * Action Proposals Disallowed: all operations are allowed, except Action Proposals
                    example: Operational
                  timestamp:
                    type: string
                    format: date-time
                    minLength: 20
                    maxLength: 20
                    description: Date/time as defined in RFC 3339, section 5.6
                    example: 2027-07-21T17:32:28Z
              example:
                status: Non-Operational
                timestamp: 2026-07-21T17:32:28Z
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /registry/{regId}:
    get:
      tags: 
        - Registry
      operationId: getRegistry
      summary: Retrieve the details of the participating Party registry section
      description: Retrieve the details of the participating Party registry section corresponding to regId.
        To keep coding compact, in code, "registry" will be used instead of "participatingPartyRegistrySection" 
      parameters:
        - name: regId
          in: path
          description: Identifier of the registry corresponding to the participating Party registry section
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
    put:
      tags:
        - Registry
      operationId: createRegistry
      summary: Create a new participating Party registry section
      description: Create a new participating Party registry section with an identifier of regId
        If a registry with the same registry identifier already exists, the operation will be unsuccessful.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the new participating Party registry section
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      requestBody:
        description: The registry contact list of this registry.
          Array must contain at least two Contacts.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contacts:
                  type: array
                  items:
                    $ref: '#/components/schemas/Contact'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Registry'
                - $ref: '#/components/schemas/ErrorOrWarningResponse'
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
    post:
      tags:
        - Registry
      operationId: resetTestRegistry
      summary:
        Reset a test registry - this operation is not available in any production environment
      description:
        For use in test environments to reset and clean up test registries.
        Removes all holdings of the registry identified by regId,
        including all ITMOs issued by the registry located in other registries,
        all transactions to/from the registry and all accounts in the registry.
        This operation not available in production environment.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry section to be reset
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      requestBody:
        description: The registry contact list of this registry.
          Array must contain at least two Contacts.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contacts:
                  type: array
                  items:
                    $ref: '#/components/schemas/Contact'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Registry'
                - $ref: '#/components/schemas/ErrorOrWarningResponse'
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'

  /registry/{regId}/insertContact:
    post:
      tags:
        - Registry
      operationId: insertContact
      summary:
        Insert a contact to a registry's list of contacts
      description:
        Insert a contact to a registry.
        The new contact is inserted in the position specified in the contact's order property - current contacts are pushed down.
        If there are already 10 contacts in the list, the operation fails.
        If there is already a contact with the same email address or the same phone number in the list, the operation fails.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry section in which the contact is to be inserted.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      requestBody:
        description: The contact to be inserted.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Registry'
                - $ref: '#/components/schemas/ErrorOrWarningResponse'
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
  /registry/{regId}/removeContact/{email}:
    post:
      tags:
        - Registry
      operationId: removeContact
      summary:
        Remove the contact with the corresponding email address from a registry's list of contacts
      description:
        Remove a contact from a registry.
        Current contacts behind the one to be removed are moved up in order.
        If there are less than 2 existing contacts, the operation fails.
        If there is no current contact with the provided email adddress, the operation fails.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry section in which the contact is to be inserted.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
        - name: email
          in: path
          description: The email address of the contact to be removed.
          required: true
          schema:
            type: string
            example: jhalleux@unfccc.int
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Registry'
                - $ref: '#/components/schemas/ErrorOrWarningResponse'
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'

  /registry/{regId}/insertAccount:
    post:
      tags:
        - Registry
      operationId: insertAccount
      summary:
        Insert an account to a registry's list of accounts
      description:
        Insert an account into a registry.
        If an account with the same account number already exists in the registry, the operation fails.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry section in which the contact is to be inserted.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      requestBody:
        description: The account to be inserted.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Registry'
                - $ref: '#/components/schemas/ErrorOrWarningResponse'
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
  /registry/{regId}/removeAccount/{accountID}:
    post:
      tags:
        - Registry
      operationId: removeAccount
      summary:
        Remove an account to a registry's list of accounts
      description:
        Remove an account from a registry.
        Only empty accounts may be removed - if the account currently holds ITMOs, the operation fails.
        If no account with the provided account exists in the registry, the operation fails.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry section in which the contact is to be inserted.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
        - name: accountID
          in: path
          description: The accountID of the contact to be removed.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 999999999
            example: 7564
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Registry'
                - $ref: '#/components/schemas/ErrorOrWarningResponse'
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'

  /actions:
    get:
      tags:
        - Action
      operationId: getActions
      summary: Retrieve a list of actions

        Transactions are returned in descending order of their most recent status update (ie most recent transactions are first).

        The offset and limit parameters allow paginating through a long list of transactions.

        The account parameter allows selecting transactions to/from a specific account

        The status parameter allows filtering by status.

        The from and to parameters allow filtering by date-time.
      description: Retrieve a list of transactions

        Transactions are returned in descending order of their most recent status update (ie most recent transactions are first).

        The offset and limit parameters allow paginating through a long list of transactions.

        The account parameter allows selecting transactions to/from a specific account

        The status parameter allows filtering by status.

        The from and to parameters allow filtering by date-time.
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 999999999
          description: The number of items to skip before starting to collect the transactions
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
          description: The number of transactions to return
        - in: query
          name: account
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 999999999
            example: 7564
          description: The account identifier
        - in: query
          name: status
          schema:
            type: string
            enum: [PROPOSED, ACCEPTED, REJECTED, CANCELLED]
            description: Allows to filter by transaction status
        - in: query
          name: from
          schema:
            type: string
            format: date-time
            description: The minimum date-time of transactions to return
        - in: query
          name: to
          schema:
            type: string
            format: date-time
            description: The maximum date-time of transactions to return
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                - type: object
                  properties:
                    itmos:
                      type: array
                      maxItems: 100
                      items:
                        $ref: '#/components/schemas/Action'
                - $ref: '#/components/schemas/ErrorOrWarningResponse'
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'

  /action/{regId}/propose:
    put:
      tags:
        - Action
      operationId: proposeAction
      summary: Propose a new action, from the registry identified by regId
        If the proposed action is valid, it will be added to the pending actions list, avalable for appropriate registries to process.
        An actionId is returned by the operation, so regitries can check and augment the status of an action.
      description: Propose a new action, from the registry identified by regId
        If the proposed action is valid, it will be added to the pending actions list, avalable for appropriate registries to process.
        An actionId is returned by the operation, so regitries can check and augment the status of an action.

        If the proposed action is not valid, the operation will fail.
        The incoming payload is the proposedAction, that also include the ITMOs involved in the action.
        These will be locked for the duration of the action.
      parameters:
        - name: regId
          in: path
          description: The registry identifier of the participating Party registry section in which the contact is to be inserted.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      requestBody:
        description: The proposed action.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposedAction'

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'

  /action/{regId}/{actionId}:
    get:
      tags:
        - Action
      operationId: getAction
      summary: Retrieve the action corresponding to actionId
      description: Retrieve the action corresonding to actionId.
        The calling registry must have a registry id corresponding to regId,
        and only only when regId is the fromRegistry or toRegistry will the action be returned.
      parameters:
        - name: regId
          in: path
          description: The identifier of the registry for which actions are to be retrieved.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
        - name: actionId
          in: path
          description: The action identifier
          required: true
          schema:
            type: integer
            format: uint32
            minimum: 1
            maximum: 4294967295
            example: 87349
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                - type: object
                  properties:
                    itmos:
                      type: array
                      maxItems: 100
                      items:
                        $ref: '#/components/schemas/Action'
                - $ref: '#/components/schemas/ErrorOrWarningResponse'
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
    post:
      tags:
        - Action
      operationId: processAction
      summary: Accept, reject or cancel an action
      description: Accept, reject or cancel an action
      parameters:
        - name: regId
          in: path
          description: The identifier of the registry attempting to process the action.
          required: true
          schema:
            type: string
            example: "BEL"
        - name: actionId
          in: path
          description: The action identifier
          required: true
          schema:
            type: integer
            format: uint32
            minimum: 1
            maximum: 4294967295
            example: 87349
      requestBody:
        description: The action to process.
          Only the recipient can accept or reject an action.
          Only the proposer can cancel an action.
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  format: enum[ACCEPTED, REJECTED, CANCELLED]
                  example: REJECTED
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Action'
                - $ref: '#/components/schemas/ErrorOrWarningResponse'
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
  
  
  /action/{regId}/pendingActions:
    get:
      tags:
        - Action
      operationId: getPendingActions
      summary: Retrieve the actions that are pending processing for the registry identified by regId
      description: Retrieve the actions that are pending processing for the registry identified by regId.
        This is the API that is expected to be normally used by registries to process transactions.
        The similar API, getSelectedActions(), returns actions with other statuses, used for management or testing.
      parameters:
        - name: regId
          in: path
          description: The identifier of the registry for which actions are to be retrieved.
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                - type: object
                  properties:
                    itmos:
                      type: array
                      maxItems: 100
                      items:
                        $ref: '#/components/schemas/Action'
                - $ref: '#/components/schemas/ErrorOrWarningResponse'
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'

  /action/{regId}/selectedActions:
    get:
      tags:
        - Action
      operationId: getSelectedActions
      summary: Retrieve the transactions for the registry identified by regId and other parameters
      description: Retrieve the transactions for the registry identified by regId and other parameters.
        Actions where the registry is both the from registry and the to registry will be retrieved.
        This API is for management and testing, as it is more complicated than getPendingActions()
      parameters:
        - name: regId
          description: The identifier of the registry for which actions are to be retrieved.
            Actions where the registry is both the from registry and the to registry will be retrieved.
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}\d{2}$'
            example: DEU00
        - in: query
          name: offset
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 999999999
          description: The number of items to skip before starting to collect the transactions
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
          description: The number of transactions to return
        - in: query
          name: status
          schema:
            type: string
            enum: [PROPOSED, ACCEPTED, REJECTED, CANCELLED]
            description: Allows to filter by transaction status
        - in: query
          name: from
          schema:
            type: string
            format: date-time
            description: The minimum date-time of transactions to return
        - in: query
          name: to
          schema:
            type: string
            format: date-time
            description: The maximum date-time of transactions to return
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                - type: object
                  properties:
                    itmos:
                      type: array
                      maxItems: 100
                      items:
                        $ref: '#/components/schemas/Action'
                - $ref: '#/components/schemas/ErrorOrWarningResponse'
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'


  /actions/last:
    get:
      tags:
        - Action
      operationId: getLastTransaction
      summary: Retrieve the last proposed transaction.  Useful to create the next transaction identifier.
      description: Retrieve the last proposed transaction.  Useful to create the next transaction identifier.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Action'
                - $ref: '#/components/schemas/ErrorOrWarningResponse'
        '400':
          description: Unsuccessful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorOrWarningResponse'


components:
  schemas:

    Registry:
      type: object
      required:
        - id
        - contacts
      properties:
        id:
          type: string
          pattern: '^[A-Z]{3}\d{2}$'
          description: Identifier of the registry corresponding to the Participating Party Registry
          example: DEU00
        contacts:
          type: array
          maxItems: 10
          description: The list of contacts for the registry.
            The order attribute determines the order of presentation of the contacts, and must start with 1, 2, 3 ... , without gaps and sorted ascendingly
            At least two contacts must be provided (primary and alternate), with order 1 and 2 respectively
          items:
            $ref: "#/components/schemas/Contact"
        accounts:
          type: array
          description: The list of accounts used by this registry
          items:
            $ref: "#/components/schemas/Account"
        lastmodifieddatetime:
          type: string
          format: date-time
          description: The date and time of the most recent change to the registry transactions, accounts or holdings.  This is used to set the cut-off date during the export.
          example: "2026-07-21T17:22:28Z"
        creationdatetime:
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"

    Account:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          maximum: 999999999
          example: 7564
        accountType:
          type: integer
          minimum: 100
          maximum: 999
        labels:
          type: array
          maxItems: 10
          items:
            type: string
            example: "My favorite account"
        suppinfo:
          type: string
          example: "Find a reasonably good example..."
        lastmodifieddatetime:
          type: string
          format: date-time
          description: The date and time of the last transaction proposed from this account, or accepted/rejected/cancelled with this account as recipient
          example: "2024-07-21T17:32:28Z"
        creationdatetime:
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"

    Contact:
      type: object
      required:
        - givenNames
        - familyName
        - email
        - phone
        - role
        - order
      properties:
        familyName:
          type: string
          example: "Halleux"
        givenNames:
          type: string
          example: "Jean-Francois"
        email:
          type: string
          example: "jhalleux@unfccc.int"
        phone:
          type: string
          example: "00498151809"
        role:
          type: string
          example: "Alternate registry administrator"
        order:
          type: integer
          format: int32
          minimum: 1
          maximum: 10
          example: 3


    Action:
      type: object
      description: An ProposedAction that has been validated by the hub, and given an actionId (see ProposedAction)
      required:
        - actionId
        - proposedAction
      properties:
        actionId:
          type: integer
          format: uint32
          description: Identifier for the action.  Action identifiers are unique across the international registry ecosystem.
          minimum: 0
          maximum: 4294967295
          example: 5869444
        proposedAction:
          $ref: '#/components/schemas/ProposedAction'

    ProposedAction:
      type: object
      description: An proposed action to be performed on a block of ITMOs.
        A registry proposes an action to the hub.  Once the hub validates the proposedAction, it is given an actionId (see Action schema).
        An action consists in the transfer of at least one ITMO from one account to another account, in the same or in a different registry.
        An authorisation/issuance/creation action must specify the same origin and destination account.
        All other transaction must specify different origin and destination accounts.
      required:
        - fromRegistry
        - fromAccount
        - toRegistry
        - toAccount
        - actionType
        - itmos
      properties:
        fromRegistry:
          type: string
          description: Important note. When a transaction is proposed, this must be the caller registry.
          example: "BEL"
        fromAccount:
          type: integer
          format: int32
          minimum: 1
          maximum: 999999999
          example: 7564
        toRegistry:
          type: string
          example: "FRA"
        toAccount:
          type: integer
          format: int32
          minimum: 1
          maximum: 999999999
          example: 38444
        actionType:
          type: integer
          description: The action type code. See Common Nomenclatures for action type codes, and their corresponding values and descriptions.
          example: 1 (meaning Authorization)
        itmos:
          $ref: '#/components/schemas/ITMO'  
        status:
          type: string
          enum: [PROPOSED, ACCEPTED, REJECTED, CANCELLED]
          example: ACCEPTED
        statusdatetime:
          type: string
          format: dateTime
          example: "2024-07-21T17:32:28Z"
        labels:
          type: array
          maxItems: 10
          items:
            type: string
            example: "My favorite transaction"
        suppinfo:
          type: string
          example: "Find a good example of suppl. information ..."
        lastmodifieddatetime:
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"
        creationdatetime: # The date time of the PROPOSED status is always here...
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"
  

    ITMO:
      type: object
      required:
        - cooperativeApproach
        - originatingPartyRegistry
        - firstID
        - lastID
        - firstTransferringParty
        - vintage
        - mitigationOutcomeHashes
        - sectors
        - activityTypes
        - metric
        - quantityCO2
        - mitigationType
        - authorisationID
      properties:
        cooperativeApproach:
          description: Cooperative approaches under Article 6.2.\nThe format of the string is \"CANNNN\" where the \"CA\" is the fixed prefix, and NNNN is a four-digit integer, that shall be incremented by one for each additional agreed cooperative approach, and added to this common nomenclature.
          type: string
          example: "CA0002"
        orginatingPartyRegistry:
          description: ISO-3166-1 alpha-3 code of the participating Party in which the mitigation outcomes originated.
          type: string
          example: "BEL"
        firstID:
          description: Identifier of the first ITMO in the block, commencing with First ID, ending with Last ID.\nBlocks from the same Originating Party Registry cannot overlap.
          type: integer
          format: int32
          example: 1
        lastID:
          description: Identifier of the last ITMO in the block, commencing with First ID, ending with Last ID.\nBlocks from the same Originating Party Registry cannot overlap.
          # Note: decision 6/CMA.4, annex I, para.5(d) requires a single unique identifier in ITMO identifier,
          # but as all ITMOs are considered as blocks, the last identifier of the block is required.
          type: integer
          format: int32
          example: 7144
        partyITMORegistry:
          description: ISO-3166-1 alpha-3 code of participating party registry currently owns the ITMO(s).
          type: string
          example: "FRA"
        firstTransferringParty:
          description: ISO-3166-1 alpha-3 code of participating party registry that initiates the \"First Transfer\".
            Refer to common nomenclalture for definition of \"First Transfer\".
          type: string
          example: "FRA"
        vintage:
          description: Year in which mitigation outcome occured.
          type: integer
          format: int32
          minimum: 2021
          maximum: 9999
          example: 2025
        mitigationOutcomeHashes:
          description: (required by Decision 6/CMA.4, annex I, para.4). ITMOs must be traceable to their mitigation outcomes.
                  This array contains the SHA256 hashes of all mitigation outcome documents for this ITMO.
                  The UNFCCC will store all MO documents, and provide an API getMitigationOutcomeDoc(originatingPartyRegistry, firstID, lastID, SHA256)
                  that will return the URL of the MO document corresponding to the hash.
          type: array
          items:
            description: SHA256 hash of a single mitigation outcome document
            type: string
            minItems: 1
            example: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        sectors:
          description: One or more sectors where the mitigation outcome occurred as per common nomenclatures based on IPCC guidelines.
            Refer to common nomenclature for recognised values for \"sectors\".
          type: array
          items:
            type: string
        activitytypes:
          description: The mitigation activity type(s) from which the ITMOs were generated.
            Refer to common nomenclature for recognised values for \"activityTypes\".
          type: array
          items:
            type: string
        metric:
          description: The metric used to measure the ITMO.
            As defined in the common nomenclature - recognised values are \"GHG\" and \"non-GHG\".
          type: string
          example: "GHG"
        quantityCO2:
          description: Quantity of ITMOs in metric tons of CO2 equivalent.
          type: integer
          format: int32
          minimum: 1
          maximum: 999999999
          example: 7144362
        gwpValues:
          description: If the mitigation outcome involves a non-CO2 greenhouse gas(es), the global warming potential (GWP) value(s) applied, consistent with the relevant CMA decisions (e.g.,\'100-year values from 5th assessment report by the IPCC\').
          type: string          
        non-GHGMetric:
          description: Type of non-GHG metric applied (e.g., ‘megawatt hours of renewable electricity generation’). This field should be reported as \‘Not applicable\’ (NA) if the ITMOs are in a GHG metric.
          type: string
        quantityNon-GHG:
          description: Quantity of ITMOs in the respective non-GHG metric. This field should be reported as ‘Not applicable’ (NA) if the ITMOs are in a GHG metric.
          type: integer
          format: int32
          minimum: 1
          maximum: 999999999
        mitigationType:
          description: “Emission reductions” or “Removals”
          type: string
          example: Emissions reduction
        isAuthorised:
          description: whether this A6.4ER has been authorised, thus, is an ITMO.  If it is authorised, the cooperativeApproach cannot be CA0000.
          type: boolean
          example: true
        authorisationID:
          description: Authorization ID as assigned by the Party reporting the authorisation.
          type: string
          example: "GUY 2024-CA1"
#  
# Apart from authorisationID, other details from the authorisation of the ITMO(s)
# shall be retrieved from the authorisation transaction log using the authorisation ID.
# These details should not be part of the ITMO object.
#
#        authorisingParty:
#          description: ISO 3166-1 alpha-3 identifier of the authorising Party.  For native ITMOs, it will be the same as the first transferring Party.
#          type: string
#          example: "GUY"
#        authorisationDateTime:
#          description: date-timestamp of the authorisation of A6.4ER, turning it into an ITMO
#          type: string
#          format: date-time
#          example: "2024-07-21T17:32:28Z"
#
        suppInfo:
          description: Any supplementary information the current owning Party may need to attach to the ITMOs
            This should be an append only property.
            Only the current owning Party should be able append supplementary information.
          type: array
          items:
            type: string
            maxLength:  255
        lastanyTxnDateTime:
          description:  Date-timestamp of the last attempted transaction.
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"
        lastAcceptedTxnDateTime:
          description:  Date-timestamp of last successful transation.
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"
        modifiedDateTime:
          description:  Date-timestamp of last modification of any of the ITMO(s) elements.
            Kept in ITMO instead of relying on hosting system to survive migration across hosting solutions.
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"
        createdDateTime:
          description:  Date-timestamp of creation of the ITMO(s).
            Kept in ITMO instead of relying on hosting system to survive migration across hosting solutions.
          type: string
          format: date-time
          example: "2024-07-21T17:32:28Z"

    ErrorOrWarningResponse: # Problem JSON / RFC 7XXX compatible error. See https://opensource.zalando.com/restful-api-guidelines/models/problem-1.0.1.yaml
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: 'about:blank'
          example: 'https://zalando.github.io/problem/constraint-violation'
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
          maxLength: 32
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
    
    Errors:
      type: object
      properties:
        errors:
          type: array
          maxItems: 100
          items:
            type: object
            properties:
              severity:
                type: string
                enum: [ERROR, WARNING]
                example: ERROR
              code:
                type: integer
                format: int32
                example: 5678
              message:
                type: string
                maxLength: 1024
                example: "Unexpected error"
              
  securitySchemes:

    basicAuth:
      type: http  #TBD: Open API 3.1 supports mutualTLS
      scheme: basic
      x-registry-secret:
        type: string

security:
  - basicAuth: []
