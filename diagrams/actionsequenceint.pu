@startuml ActionSequence

skinparam style strictuml
skinparam dpi 300

participant "Sending\nregistry" as Sender

box "International registry"
  participant "Hub" as Hub
  collections "Actions" as Q
end box

participant "Receiving\nregistry" as Receiver

Sender -> Hub : proposeAction(actionProposal)

group Transaction Boundary 1
  Hub -> Hub: parse(actionProposal)
  Hub -> Hub: createAction(actionProposal):Action
  Hub -> Q: put(action,visibility=Sending registry, status=Proposed)
  note right: Action Status == Proposed
  Hub -> Hub: validateProposal(action)
  Hub -> Hub: splitAndLock(getItmos(action.actionId))
  Hub -> Q: update(actionId, visibility=Sending Registry & Receiving Registry, status=Validated)
  note right: Action Status == Validated
end group

Hub --> Sender: OK: actionId

Receiver -> Q : getOngoingActions(): [actions]
note right
  Returns an array containing 
  all ongoing (ie not yet finalized) actions
  with visibility incl. calling registry
end note

Receiver -> Receiver: AcceptOrRejectAction(action)
Receiver -> Hub : processAction(actionId,status)
note left: status in \n[Accepted, Rejected]

group Transaction Boundary 2
  Hub -> Hub: parse()
  Hub -> Hub: validateProcessAction()
  note right: Only the receiving registry can accept or reject the action, etc.
  Hub -> Q: update(actionId, status)
  note right: Action Status==Accepted or Rejected
end group
Hub--> Receiver: OK

Sender -> Q : getOngoingActions(): [actions]
Sender -> Sender : finalize(actionId, status)
Sender -> Hub : processAction(actionId,status)
note right
  status=Completed if Accepted by the receiving registry
  status=Terminated if Rejected by the receiving registry
end note

group Transaction Boundary 3
  Hub -> Hub : parse()
  Hub -> Hub : validateFinalization()
  Hub -> Hub : finalize(actionId, status)
  Hub -> Q: update(actionId, status)
  Hub -> Hub: unlock(getItmos(actionId))
  note right: Action Status==Completed or Terminated
end group
Hub --> Sender: OK

@enduml
