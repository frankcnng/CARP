@startuml actionProposal_Valid_SingleReg_Sequence

title Action Proposal - Valid Proposal - Single Registry

skinparam style strictuml

participant "Sending\nregistry" as Sender
participant "Interoperability\nHub" as Hub

activate Sender
Sender -> Sender: selectAndSplitITMOs(actionProposal)
note right: select ITMOs from multiple blocks\nor split ITMOs into smaller blocks\nto match quantity in //actionProposal//

Sender -> Sender: lockITMOs(iTMOIDs[])

Sender -> Hub++ : proposeAction(actionProposal)
note right: actionStatus == Proposed
deactivate Hub
deactivate Sender

Hub -> Hub++: lockITMOs(iTMOIDs[])
note right: //iTMOIDs[]// extracted from //actionProposal//

Hub -> Hub: validateProposal(actionProposal)
Hub -> Hub--: createNextAction(actionProposal)
note right: actionStatus == Validated\n\n(may include warnings\nlogged in Action)

activate Sender
Sender -> Hub++ : getPendingActions()
Sender <-- Hub--: //actions[]//

Sender -> Sender: processPendingActions(actions[])
activate Sender
Sender -> Sender: processActionStatusAndWarnings(action)
note right: actionStatus == Validated
Sender -> Sender: processAction(action)
Sender -> Sender: unlockITMOs(iTMOIDs[])

alt No warnings or Registry proceeds despite warnings

  Sender -> Hub++: processAction(actionId, actionStatus)
  note right: actionStatus == Accepted
  deactivate Sender
  deactivate Sender
  Hub -> Hub: validateProcessAction(actionId, actionStatus)
  Hub -> Hub: processAction(actionId, actionStatus)
  note right: actionStatus == Completed
  Hub -> Hub--: unlockITMOs(iTMOIDs[])

end

alt Registry does not proceed

  activate Sender
  activate Sender
  Sender -> Hub++: processAction(actionId, actionStatus)
  note right: actionStatus == Terminated
  deactivate Sender
  deactivate Sender
  Hub -> Hub: validateProcessAction(actionId, actionStatus)
  Hub -> Hub: processAction(actionId, actionStatus)
  note right: actionStatus == Terminated
  Hub -> Hub--: unlockITMOs(iTMOIDs[])

end

@enduml
