@startuml actionProposal_Valid_TwoReg_Sequence

title Action Proposal - Valid Proposal - Two Registries

skinparam style strictuml

participant "Sending\nregistry" as Sender
participant "Interoperability\nHub" as Hub
participant "Receiving\nregistry" as Receiver

activate Sender
Sender -> Sender: selectAndSplitITMOs(actionProposal)
note right: select ITMOs from multiple blocks\nor split ITMOs into smaller blocks\nto match quantity in //actionProposal//

Sender -> Sender: lockITMOs(iTMOIDs[])
note right: iTMOIDs[] from //selectAndSplitITMOs()//

Sender -> Hub++ : proposeAction(actionProposal)
note right: actionStatus == Proposed
deactivate Sender
deactivate Hub

Hub -> Hub++: lockITMOs(iTMOIDs[])
Hub -> Hub: validateProposal(actionProposal)
Hub -> Hub--: createNextAction(actionProposal)
note left: actionStatus == Validated\n\n(may include warnings\nlogged in Action)

activate Receiver
Receiver -> Hub++: getPendingActions()
note right: Registry polls the Hub\nfor pending Actions
  
Receiver <-- Hub: //actions[]//
deactivate Hub

Receiver -> Receiver: processPendingActions(actions[])
activate Receiver
Receiver -> Receiver: processActionStatusAndWarnings(action)
note left: actionStatus == Validated
Receiver -> Receiver: processAction(action)

alt No warnings or Receiving Registry proceeds despite warnings

  Receiver -> Hub++: processAction(actionId, actionStatus)
  deactivate Receiver
  deactivate Receiver
  note right: actionStatus == Accepted
  Hub -> Hub: validateProcessAction(actionId, actionStatus)
  Hub -> Hub: processAction(actionId, actionStatus)
  note left: actionStatus == Accepted
  deactivate Hub

  activate Sender
  Sender -> Hub++ : getPendingActions()
  Sender <-- Hub : //actions[]//
  deactivate Hub
  
  Sender -> Sender: processPendingActions(actions[])
  activate Sender
  Sender -> Sender: processActionStatusAndWarnings(action)
  note right: actionStatus == Accepted
  Sender -> Sender: processAction(action)
  Sender -> Sender: unlockITMOs(iTMOIDs[])

  Sender -> Hub++: processAction(actionId, actionStatus)
  note right: actionStatus == Completed
  deactivate Sender
  deactivate Sender
  Hub -> Hub: validateProcessAction(actionId, actionStatus)
  Hub -> Hub: processAction(actionId, actionStatus)
  note right: actionStatus == Completed
  Hub -> Hub--: unlockITMOs(iTMOIDs[])

end

alt Receiving Registry does not proceed

  activate Receiver
  activate Receiver
  Receiver -> Hub++: processAction(actionId, actionStatus)
  note right: actionStatus == Rejected
  deactivate Receiver
  deactivate Receiver
  Hub -> Hub: validateProcessAction(actionId, actionStatus)
  Hub -> Hub: processAction(actionId, actionStatus)
  note left: actionStatus == Rejected
  deactivate Hub

  activate Sender
  Sender -> Hub++ : getPendingActions()
  Sender <-- Hub: //actions[]//
  deactivate Hub
  
  Sender -> Sender: processPendingActions(actions[])
  activate Sender
  Sender -> Sender: processActionStatusAndWarnings(action)
  note right: actionStatus == Rejected

  Sender -> Sender: processAction(action)
  Sender -> Sender: unlockITMOs(iTMOIDs[])

  Sender -> Hub++: processAction(actionId, actionStatus)
  note right: actionStatus == Terminated
  deactivate Sender
  deactivate Sender
  Hub -> Hub: validateProcessAction(actionId, actionStatus)
  Hub -> Hub: processAction(actionId, actionStatus)
  note right: actionStatus == Terminated
  Hub -> Hub--: unlockITMOs(iTMOIDs[])

end

@enduml
