@startuml

@startuml itmoUpdate_Notification_Sequence

title ITMO Update Notification

skinparam style strictuml

participant "First transferring\nparticipating\nParty registry" as Sender
participant "Interoperability\nHub" as Hub
participant "Holding\nregistry 1" as Receiver1
participant "Holding\nregistry 2" as Receiver2

activate Sender
Sender -> Sender: updateITMO(itmo)

Sender -> Hub++ : notifyITMOUpdate(itmoId, attributes, ...)
Hub->Hub: verifyNewAttributes(itmoid, attributes)
Hub -> Hub: addNotification(itmoId, attributes, ...)
  note right: notificationStatus -- Created
Sender <-- Hub: //notificationId//
deactivate Sender
deactivate Hub

activate Receiver1
Receiver1 -> Hub++: getPendingNotifications()
  note left: R1.party.notificationId.NotificationStatus == Retrieved
Receiver1 <-- Hub: //R1's notifications[]//
deactivate Hub

Receiver1 -> Receiver1: processPendingNotifications(notifications[])
activate Receiver1
Receiver1 -> Receiver1: processNotification(notification)
Receiver1 -> Receiver1: updateITMO(itmoId, attributes, ...)
Receiver1 -> Hub++: acknowledgeNotification(notificationId)
note right: actionStatus == Acknowledged
deactivate Receiver1
deactivate Receiver1
Hub -> Hub--: updateNotification(R1.party, notificationId)
  note left: status == Acknowledged

activate Receiver2
Receiver2 -> Hub++: getPendingNotifications()
  note left: R2.party.notificationId.NotificationStatus == Retrieved
Receiver2 <-- Hub: //R2's notifications[]//
deactivate Hub
Receiver2 -> Receiver2: processPendingNotifications(notifications[])
activate Receiver2
Receiver2 -> Receiver2: processNotification(notification)
deactivate Receiver2
deactivate Receiver2
note left: R2 does not act on notification,\ndoes not update ITMO,\nthus R2.party.notificationId.noticationStatus\nremains Retrieved.


@enduml
